// eslint-disable-next-line max-params
(function main(React, React_dom, Mobx, Querystring, App_component) {
    'use strict';

    const app_title = 'Bonjour Explorer!';
    const history = window.history;
    const app = Object.freeze({
        state: Mobx.observable({
            path: '/',
            query: null,
            fragment: null,
            location: Object.seal({
                pathname: '/',
                search: '',
                hash: '',
                }), // eslint-disable-line
            page: Object.seal({
                title: app_title,
                props: {},
                }), // eslint-disable-line
            }), // eslint-disable-line
        render: render_app,
        history: Object.freeze({
            push: push_app_state,
            replace: replace_app_state,
            go: history.go,
            go_back: history.back,
            go_forward: history.forward,
            }), // eslint-disable-line
        }); // eslint-disable-line
    derive_state();
    window.addEventListener('popstate', derive_state);
    window.addEventListener('hashchange', derive_state);
    return module.exports = app;

    // -----------

    function derive_state() {
        process_state_params({ location: window.location });
        return true;
    }
    function push_app_state(params) {
        process_state_params(params);
        history.pushState({}, '', app.state.path);
        return true;
    }
    function replace_app_state(params) {
        process_state_params(params);
        history.replaceState({}, '', app.state.path);
        return true;
    }

    function click_local_hyperlink(click_event) {
        const hyperlink = click_event.currentTarget;
        click_event.preventDefault();
        push_app_state({
            location: {
                pathname: hyperlink.pathname,
                search: hyperlink.search,
                hash: hyperlink.hash,
                }, // eslint-disable-line
            }); // eslint-disable-line
        return true;
    }

    function render_app(params) {
        const dom_element = params.element;
        const routes = params.routes;
        if (!(dom_element instanceof HTMLElement)) {
            throw new TypeError('params.element must be an DOM element');
        }
        if (!Array.isArray(routes)) {
            throw new TypeError('params.routes must be an array');
        }
        const page_element = React.createElement(App_component, {
            state: app.state,
            dom_element,
            routes,
            }); // eslint-disable-line
        React_dom.render(page_element, dom_element);
        const hyperlinks = document.querySelectorAll('a[href]');
        for (let i = 0, n = hyperlinks.length - 1; i <= n; i++) {
            const hyperlink = hyperlinks[i];
            window.location.host === hyperlink.host
                && hyperlink.addEventListener('click', click_local_hyperlink)
                ;
        }
        return true;
    }

    function process_state_params(params) {
        if (!params.location
            && !params.path
            && !params.query
            && !params.fragment
            ) {
            return true;
        }
        const new_path_state = parse_path_state(params);
        app.state.path !== new_path_state.path
            && (app.state.path
                = app.state.location.pathname
                = new_path_state.path
                )
            ;
        app.state.location.search !== new_path_state.location.search
            && (app.state.query = new_path_state.query)
            && (app.state.location.search = new_path_state.location.search)
            ;
        app.state.fragment !== new_path_state.fragment
            && (app.state.fragment = new_path_state.fragment)
            && (app.state.location.hash = new_path_state.location.hash)
            ;
        if (params.page) {
            const page_title = String(params.page.title);
            app.state.page.title !== page_title
                && (app.state.page.title
                    = document.title
                    = `${ app_title } ${ page_title }`
                    )
                ;
            app.state.page.props = params.page.props || {};
        }
        return true;
    }

    function parse_path_state(params) {
        validate_params(params);
        const location = { hash: '', search: '' };
        let path = (params.location && params.location.pathname)
            || params.path
            || window.location.pathname
            ;
        let query = null;
        let fragment = null;
        if (params.location) {
            let index;
            -1 !== (index = path.indexOf('#'))
                && (location.hash = path.substring(index))
                && (path = path.substr(0, index))
                && (fragment = location.hash.substring(1))
                ;
            -1 !== (index = path.indexOf('?'))
                && (location.search = path.substring(index))
                && (path = path.substr(0, index))
                && (query = Querystring.parse(location.search.substring(1)))
                ;
            location.pathname = path;
        } else {
            params.query
                && (query = params.query)
                && (location.search
                    = `?${ Querystring.stringify(params.query) }`
                    )
                ;
            params.fragment
                && (fragment = params.fragment)
                && (location.hash = `#${ params.fragment }`)
                ;
        }
        return {
            path,
            query,
            fragment,
            location,
            }; // eslint-disable-line

        // -----------

        function validate_params(path_state) {
            if (path_state.location) {
                if ('object' !== typeof path_state.location) {
                    throw new Error(''
                        + `${ path_state.location } is not an object.`
                        + ' params.location must be an object',
                        );
                }
                validate_location_object(path_state.location);
            }
            if (path_state.path && String !== path_state.path.constructor) {
                throw new Error(''
                    + `${ path_state.path } is not a string.`
                    + ' params.path must be a string',
                    );
            }
            if (path_state.query && 'object' !== typeof path_state.query) {
                throw new Error(''
                    + `${ path_state.query } is not an object.`
                    + ' params.query must be an object',
                    );
            }
            if (path_state.fragment
                && String !== path_state.fragment.constructor
                ) {
                throw new Error(''
                    + `${ path_state.fragment } is not a string.`
                    + ' params.fragment must be a string',
                    );
            }
            return true;

            // -----------

            function validate_location_object(new_location) {
                if (new_location instanceof Location) {
                    return true;
                }
                const object_has_key = Object.prototype.hasOwnProperty;
                const required_keys = [ 'pathname', 'search', 'hash' ];
                for (let i = 0, n = required_keys.length - 1; i <= n; i++) {
                    const key = required_keys[i];
                    if (!object_has_key.call(new_location, key)) {
                        throw new Error(''
                            + `params.location.${ key } is a required string`
                            + ' for locations',
                            );
                    } else if (String !== new_location[key].constructor) {
                        throw new Error(''
                            + `params.location.${ key } was not passed`
                            + ` as a string: ${ new_location[key] }`,
                            );
                    }
                }
                return true;
            }
        }
    }
}(
    require('react'),
    require('react-dom'),
    require('mobx'),
    require('qs'),
    require('./app'),
));
