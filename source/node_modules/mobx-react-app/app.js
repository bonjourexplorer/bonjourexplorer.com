// eslint-disable-next-line max-params
(function main(React, Mobx, Mobx_react) {
    'use strict';

    function App(props) {
        const this_component = this;
        React.Component.call(this_component, props); // eslint-disable-line
        this_component.state = props.state;
    }
    App.prototype = new React.Component;
    App.constructor = App;
    App.prototype.render = render;
    return module.exports = Mobx_react.observer(App);

    // -----------

    function render() {
        const this_component = this;
        const { props, state } = this_component;
        const { dom_element, routes } = props;

        const body_element = document.body;
        const page = match_route(state.path);
        page
            ? dom_element.classList.add('page')
                || body_element.classList.add('page')
            : dom_element.classList.remove('page')
                || body_element.classList.remove('page')
            ;
        return page
            ? React.createElement(page.component, page.props)
            : React.createElement('no-routes-matched')
            ;

        // -----------

        function match_route(path) {
            for (let i = 0, n = routes.length - 1; i <= n; i++) {
                const route = ensure_valid_route(routes[i]);
                const pattern = route.route_pattern;
                const component = route.page_component;

                if (String === pattern.constructor && path === pattern) {
                    return {
                        component,
                        props: {},
                        }; // eslint-disable-line
                } else if (pattern instanceof RegExp) {
                    const matches = pattern.exec(path);
                    if (matches) {
                        return {
                            component,
                            props:
                                build_page_props(route, matches.slice(1), state)
                                ,
                            }; // eslint-disable-line
                    }
                }
            }
            return null;

            // -----------

            function ensure_valid_route(route) {
                const pattern = route.route_pattern;
                const component_prototype = route.page_component.prototype;
                if (String === pattern.constructor) {
                    if (route.route_pattern_tokens) {
                        throw new TypeError(''
                            + 'route.route_pattern_tokens has no effect'
                            + ' unless route.route_pattern is a'
                            + ' regular expression',
                            );
                    }
                } else if (pattern instanceof RegExp) {
                    if (!Array.isArray(route.route_pattern_tokens)) {
                        throw new TypeError('route.route_pattern_tokens'
                            + ' must be an array of strings that correspond'
                            + ' to captured groups in the'
                            + ' route.route_pattern regular expression',
                            );
                    }
                } else {
                    throw new TypeError('route.route_pattern must be a'
                        + ' string or regular expression',
                        );
                }
                if (!(component_prototype instanceof React.Component)) {
                    throw new TypeError(
                        'route.page_component must be a React Component',
                        );
                }
                return route;
            }
        }
        function build_page_props(route, matches) {
            const { query, fragment } = state;
            const page_props = { matches, query: Mobx.toJS(query), fragment };
            const tokens = route.route_pattern_tokens;
            if (tokens.length > 0) {
                for (let i = 0, n = tokens.length - 1; i <= n; i++) {
                    const token_name = tokens[i];
                    if (String !== token_name.constructor) {
                        throw new TypeError(''
                            + `route.route_pattern_tokens[${ i }]`
                            + ` is not a string: ${ token_name }`,
                            );
                    }
                    page_props[token_name] = matches[i];
                }
            }
            return page_props;
        }
    }
}(
    require('react'),
    require('mobx'),
    require('mobx-react'),
));
